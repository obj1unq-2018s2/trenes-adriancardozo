import trenes.*
import depositos.*
import unidades.*
describe "tests de Deposito" {
	const deposito = new Deposito()
	const formacion1 = new Formacion()
	const formacion2 = new Formacion()
	const vagonPasajeros1 = new VagonDePasajeros()
	const vagonPasajeros2 = new VagonDePasajeros()
	const vagonPasajeros3 = new VagonDePasajeros()
	const vagonPasajeros4 = new VagonDePasajeros()
	const vagonCarga1 = new VagonDeCarga()
	const vagonCarga2 = new VagonDeCarga()
	const vagonCarga3 = new VagonDeCarga()
	const vagonCarga4 = new VagonDeCarga()
	const locomotora1 = new Locomotora()
	const locomotora2 = new Locomotora()
	const locomotora3 = new Locomotora()
	const locomotora4 = new Locomotora()
	const locomotoraSuelta = new Locomotora()
	fixture {
		locomotoraSuelta.velocidadMaxima(1200)
		locomotoraSuelta.peso(500)
		locomotoraSuelta.pesoMaximoQuePuedeArrastrar(800)
		locomotora1.velocidadMaxima(200)
		locomotora1.peso(100)
		locomotora1.pesoMaximoQuePuedeArrastrar(700)
		locomotora2.velocidadMaxima(500)
		locomotora2.peso(300)
		locomotora2.pesoMaximoQuePuedeArrastrar(700)
		locomotora3.velocidadMaxima(200)
		locomotora3.peso(100)
		locomotora3.pesoMaximoQuePuedeArrastrar(1500)
		locomotora4.velocidadMaxima(500)
		locomotora4.peso(300)
		locomotora4.pesoMaximoQuePuedeArrastrar(700)
		vagonCarga1.cargaMaxima(500)
		vagonCarga2.cargaMaxima(700)
		vagonCarga3.cargaMaxima(50000)
		vagonCarga4.cargaMaxima(30000)
		vagonPasajeros1.anchoUtil(2.5)
		vagonPasajeros1.largo(10)
		vagonPasajeros2.anchoUtil(2.4)
		vagonPasajeros2.largo(20)
		vagonPasajeros3.anchoUtil(2.5)
		vagonPasajeros3.largo(30)
		vagonPasajeros4.anchoUtil(2.4)
		vagonPasajeros4.largo(50)
		formacion1.agregarLocomotora(locomotora1)
		formacion1.agregarLocomotora(locomotora2)
		formacion1.agregarVagon(vagonPasajeros1)
		formacion1.agregarVagon(vagonPasajeros2)
		formacion1.agregarVagon(vagonCarga1)
		formacion1.agregarVagon(vagonCarga2)
		formacion2.agregarLocomotora(locomotora3)
		formacion2.agregarLocomotora(locomotora4)
		formacion2.agregarVagon(vagonPasajeros3)
		formacion2.agregarVagon(vagonPasajeros4)
		formacion2.agregarVagon(vagonCarga3)
		formacion2.agregarVagon(vagonCarga4)
		deposito.agregarLocomotoraSuelta(locomotoraSuelta)
		deposito.agregarFormacion(formacion1)
		deposito.agregarFormacion(formacion2)
	}
	test "test de vagonesMasPesados" {
		assert.equals(#{vagonPasajeros2, vagonCarga3}, deposito.vagonesMasPesados())
	}
	test "test de necesitaConductorExperimentado" {
		//El deposito delega a las formaciones el metodo para saber si estas son complejas
		//A su vez la formacion delega en los vagones y las locomotoras el calculo de su peso
		assert.that(deposito.necesitaConductorExperimentado())
	}
	test "test de agregarLocomotoraA" {
		assert.notThat(formacion1.puedeMoverse())
		assert.equals(#{locomotora1, locomotora2}, formacion1.locomotoras())
		locomotoraSuelta.pesoMaximoQuePuedeArrastrar(30000)
		deposito.agregarLocomotoraA(formacion1)
		assert.that(formacion1.puedeMoverse())
		assert.equals(#{locomotora1, locomotora2, locomotoraSuelta}, formacion1.locomotoras())
	}

}